<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GraphPosts on Andrea Perlato</title>
    <link>/graphpost/</link>
    <description>Recent content in GraphPosts on Andrea Perlato</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/graphpost/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to compare data at different scales</title>
      <link>/graphpost/how-to-compare-data-at-different-scales/</link>
      <pubDate>Tue, 04 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/graphpost/how-to-compare-data-at-different-scales/</guid>
      <description>I recently underwent to different tests of the so called Hair Analysis, and as a result I was given different diagnoses, or better different results. More precisely I sent two of my hair samples to a two different labs, one in Italy and the second in Switzerland. The results are quite different as described by the table and graph below.  In 2011 a comprehensive review was published of the scientific literature on hair elemental (mineral) analysis.</description>
    </item>
    
    <item>
      <title>Interactive Forecasting</title>
      <link>/graphpost/interactive-forecasting/</link>
      <pubDate>Wed, 03 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>/graphpost/interactive-forecasting/</guid>
      <description>body {text-align: justify}In this post, we use some fairly new technology of time series analysis namely neural nets and interactive charting tools.
INTERACTIVE GRAPH  The time series results should be presented interactively in order to highlight certain features.
# Handle outlierslibrary(forecast)myts &amp;lt;- tsclean(myts)# Set up a NNmynnetar &amp;lt;- nnetar(myts)# Forecast 3 yearsnnetforecast &amp;lt;- forecast(mynnetar, h = 36, PI = TRUE) # PI create the prediction intervals for the forecastlibrary(ggplot2)# Data we need for the graphdata &amp;lt;- nnetforecast$x # raw datalower &amp;lt;- nnetforecast$lower[,2] # confidence intervals lower boundupper &amp;lt;- nnetforecast$upper[,2] # confidence intervals upper boundpforecast &amp;lt;- nnetforecast$mean # th element meanmydata &amp;lt;- cbind(data, lower, upper, pforecast) # put everything in one dataframelibrary(dygraphs)dygraph(mydata, main = &amp;quot;Campsite Restaurant&amp;quot;) %&amp;gt;% # get data and the captiondyRangeSelector() %&amp;gt;% # the zoom tooldySeries(name = &amp;quot;data&amp;quot;, label = &amp;quot;Revenue Data&amp;quot;) %&amp;gt;% # add time series which are store in: data &amp;lt;- nnetforecast$xdySeries(c(&amp;quot;lower&amp;quot;,&amp;quot;pforecast&amp;quot;,&amp;quot;upper&amp;quot;), label = &amp;quot;Revenue Forecast&amp;quot;) %&amp;gt;% # add the forecast and CIdyLegend(show = &amp;quot;always&amp;quot;, hideOnMouseOut = FALSE) %&amp;gt;% # add the legend (time series + forecast)dyAxis(&amp;quot;y&amp;quot;, label = &amp;quot;Monthly Revenue USD&amp;quot;) %&amp;gt;% # label the y axisdyHighlight(highlightCircleSize = 5, # specify what happen when the mouse in hovering the graphhighlightSeriesOpts = list(strokeWidth = 2)) %&amp;gt;%dyOptions(axisLineColor = &amp;quot;navy&amp;quot;, gridLineColor = &amp;quot;grey&amp;quot;) %&amp;gt;% # set axis and fridline colorsdyAnnotation(&amp;quot;2010-8-1&amp;quot;, text = &amp;quot;CF&amp;quot;, tooltip = &amp;quot;Camp Festival&amp;quot;, attachAtBottom = T) # add annotation{&#34;</description>
    </item>
    
    <item>
      <title>Interactive Dashboard</title>
      <link>/graphpost/interactive-dashboard/</link>
      <pubDate>Wed, 27 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/graphpost/interactive-dashboard/</guid>
      <description>body {text-align: justify}A lot of the times when dashboards are implemented they are with a very specific dataset. The problem with this is that we have to rebuild them from scratch every time. The advantage to use shiny is the possibility to create interactive dashboard or webapp without, and reusing the code already wirtten we can adapt it with new data. Here below, there are some examples of interactive dashboards.</description>
    </item>
    
    <item>
      <title>Interactive Graphs</title>
      <link>/graphpost/interactive-graphs/</link>
      <pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/graphpost/interactive-graphs/</guid>
      <description>body {text-align: justify}In this post we are going to create interactive graphs using Plotly.  Plotly allows us to create interactive charts, plot and maps with R. Plotly is designed to build a vast range of visualizations.  Crucially, it has the ability to automatically create interactive charts from the output ggplot2 which is the most abvanced R library to create scientific graphs.</description>
    </item>
    
    <item>
      <title>Interactive Tables</title>
      <link>/graphpost/interactive-tables/</link>
      <pubDate>Thu, 14 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/graphpost/interactive-tables/</guid>
      <description>body {text-align: justify}Oftern, it is useful to provide interactive tables alonside charts. Responsive designed web content reflows itself dependent on the with of the browser window. There are many columns in the table which are over to the right-hand side and we need to scroll to access them.  So, could be really nice that the columns which donâ€™t fit on the screen, are instead collapsed somehow, and optionally enable these.</description>
    </item>
    
    <item>
      <title>Interactive Network</title>
      <link>/graphpost/interactive-network/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/graphpost/interactive-network/</guid>
      <description>body {text-align: justify}Interactive Network is incredibly useful for visualizing the connections and relatioship between individuals, locations, and other data sets.
library(&amp;quot;tidyverse&amp;quot;)library(&amp;quot;leaflet&amp;quot;)library(&amp;quot;oidnChaRts&amp;quot;)transport_data &amp;lt;- read_csv(&amp;quot;C:/07 - R Website/dataset/Graph/transport_data.csv&amp;quot;)colnames(transport_data) &amp;lt;- colnames(transport_data) %&amp;gt;%gsub(&amp;quot;sender&amp;quot;, &amp;quot;start&amp;quot;, .) %&amp;gt;%gsub(&amp;quot;receiver&amp;quot;, &amp;quot;end&amp;quot;, .)transport_data &amp;lt;- transport_data %&amp;gt;%unite(start.location, c(start.country, start.city, start.state)) %&amp;gt;%unite(end.location, c(end.country, end.city, end.state))transport_data %&amp;gt;%geo_lines_plot(){&#34;</description>
    </item>
    
    <item>
      <title>Automotive Multivariate Visualization</title>
      <link>/graphpost/automotive-multivariate-visualization/</link>
      <pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/graphpost/automotive-multivariate-visualization/</guid>
      <description>body {text-align: justify}This is a session dedicated to multivariate data visualization using some tipical feature of automobile. Here below we can see the matrix of correlation between features and a graphical representation.
 mpg cyl disp hp drat wt qsec vs am gear carbmpg 1.00 -0.85 -0.85 -0.78 0.68 -0.87 0.42 0.66 0.60 0.48 -0.55cyl -0.85 1.00 0.90 0.83 -0.70 0.78 -0.59 -0.81 -0.</description>
    </item>
    
  </channel>
</rss>